# Current Version v_202305041750
# START PRINT MACROS
# Call this from your slicer (custom g-code). 
# Read more here: https://3dwork.gitbook.io/3dwork.io/klipper/empezamos/configuracion-klipper-en-laminadores
#####

[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
gcode:
  CLEAR_PAUSE
  {% if printer["gcode_macro GLOBAL_VARS"].force_absolute_position|lower == 'true' %}
  G90
  {% endif %}
  SAVE_GCODE_STATE NAME=start_print_state
  # Metric values
  G21
  # Absolute positioning
  G90 
  # Set extruder to absolute mode
  M82
  {% if printer["gcode_macro GLOBAL_VARS"].z_probe|lower == 'stowable' %}
  STOWABLE_PROBE_BEGIN_BATCH
  {% endif %}
  # Home if needed
  MAYBE_HOME
  {% if params.CHAMBER_TEMP is defined %}
  _START_PRINT_HEAT_CHAMBER CHAMBER_TEMP={params.CHAMBER_TEMP} BED_TEMP={printer["gcode_macro GLOBAL_VARS"].start_print_heat_chamber_bed_temp}
  {% endif %}
  M117 Heating bed...
  RESPOND MSG="Heating bed..."
  # Wait for bed to heat up
  M190 S{params.BED_TEMP|default(printer.heater_bed.target, true) }
  # Run the customizable "AFTER_HEATING_BED" macro.
  _START_PRINT_AFTER_HEATING_BED
  # Run the customizable "BED_MESH" macro
  _START_PRINT_BED_MESH
  {% if printer["gcode_macro GLOBAL_VARS"].z_probe|lower == 'stowable' %}
  STOWABLE_PROBE_END_BATCH
  {% endif %}
  # Start heating extruder
  M104 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
  # Run the customizable "PARK" macro
  _START_PRINT_PARK
  # Wait for extruder to heat up
  M117 Heating Extruder...
  RESPOND MSG="Heating Extruder..."
  M109 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
  # Run the customizable "AFTER_HEATING_EXTRUDER" macro.
  _START_PRINT_AFTER_HEATING_EXTRUDER
  M117 Printing...
  RESPOND MSG="Printing..."
  RESTORE_GCODE_STATE NAME=start_print_state
  # Set extrusion mode based on user configuration
  {% if printer["gcode_macro GLOBAL_VARS"].relative_extrusion|lower == 'true' %}
    M83
  {% else %}
    M82
  {% endif %}
  G92 E0

#####
# START PRINT MACRO HOOKS
# You can copy these to printer.cfg and modify them to your liking, or just use them as is.
####

[gcode_macro _START_PRINT_AFTER_HEATING_BED]
gcode:
  {% if printer["gcode_macro GLOBAL_VARS"].preheat_extruder|lower == 'true' %}
    {% set min_temp = printer["gcode_macro GLOBAL_VARS"].preheat_extruder_temp|float %}
    {% set max_temp = printer["gcode_macro GLOBAL_VARS"].preheat_extruder_temp|float + 5 %}
    M117 Pre-heating extruder...
    RESPOND MSG="Pre-heating extruder..."
    # Wait for extruder to reach a predefined preheat temp so an inductive probe (if present) is at a predictable temp. 
    # Also allows the bed heat to spread a little, and softens any plastic that might be stuck to the nozzle.
    M104 S{min_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={min_temp} MAXIMUM={max_temp}
  {% endif %}

[gcode_macro _START_PRINT_BED_MESH]
gcode:
  {% set default_profile = printer["gcode_macro GLOBAL_VARS"].bed_mesh_profile|default('default') %}
  {% if printer["gcode_macro GLOBAL_VARS"].calibrate_bed_mesh|lower == 'true' %}
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE PROFILE={default_profile}
    BED_MESH_PROFILE LOAD={default_profile}
  {% elif printer["gcode_macro GLOBAL_VARS"].bed_mesh_profile is defined %}
    BED_MESH_CLEAR
    BED_MESH_PROFILE LOAD={printer["gcode_macro GLOBAL_VARS"].bed_mesh_profile}
  {% endif %}

[gcode_macro _START_PRINT_PARK]
gcode:
  {% set z = printer["gcode_macro GLOBAL_VARS"].start_print_park_z_height|float %}
  {% set zSpeed = printer["gcode_macro GLOBAL_VARS"].macro_z_speed|float * 60 %}
  _PARK LOCATION={printer["gcode_macro GLOBAL_VARS"].start_print_park_in} X={printer["gcode_macro GLOBAL_VARS"].start_print_park_x}
  G0 Z{z} F{zSpeed}

[gcode_macro _START_PRINT_AFTER_HEATING_EXTRUDER]
gcode:
  {% if printer["gcode_macro GLOBAL_VARS"].nozzle_priming|lower == 'primeline' %}
    PRIME_LINE
  {% endif %}
  {% if printer["gcode_macro GLOBAL_VARS"].nozzle_priming|lower == 'primeblob' %}
    PRIME_BLOB
  {% endif %}
  {% if printer["gcode_macro GLOBAL_VARS"].skew_profile is defined %}
    SKEW_PROFILE LOAD={printer["gcode_macro GLOBAL_VARS"].skew_profile}
  {% endif %}
  
[gcode_macro PRIME_LINE]
description: Prints a primeline, used internally, if configured, as part of the START_PRINT macro.
gcode:
  SAVE_GCODE_STATE NAME=prime_line_state
  {% set speed = printer["gcode_macro GLOBAL_VARS"].macro_travel_speed|float * 60 %}
  {% set z_speed = printer["gcode_macro GLOBAL_VARS"].macro_z_speed|float * 60 %}
  {% if printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_x|lower == 'min' %}
    {% set x_start = 5 %}
  {% elif printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_x|lower == 'max' %}
    {% set x_start = printer.toolhead.axis_maximum.x - 5 %}
  {% else %}
    {% set x_start = printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_x|float %}
  {% endif %}
  {% if printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_y|lower == 'min' %}
    {% set y_start = 5 %}
    {% set y_factor = 1 %}
  {% elif printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_y|lower == 'max' %}
    {% set y_start = printer.toolhead.axis_maximum.y - 5 %}
    {% set y_factor = -1 %}
  {% else %}
    {% set y_start = printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_y|float %}
    {% if printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_y|float < printer.toolhead.axis_maximum.y / 2 %}
      {% set y_factor = 1 %}
    {% else %}
      {% set y_factor = -1 %}
    {% endif %}
  {% endif %}
  {% if printer["gcode_macro GLOBAL_VARS"].nozzle_prime_direction|lower == 'forwards' %}
    {% set y_factor = 1 %}
  {% elif printer["gcode_macro GLOBAL_VARS"].nozzle_prime_direction|lower == 'backwards' %}
    {% set y_factor = -1 %}
  {% endif %}
  {% set z = printer["gcode_macro GLOBAL_VARS"].start_print_park_z_height|float %}
  # Absolute positioning
  G90 
  # Absolute extrusion
  M82
  M117 Priming nozzle with prime line..
  RESPOND MSG="Priming nozzle with prime line.."
  # Lift to start print Z height
  G0 Z{z} F{z_speed}
  # move to blob position along the edge of the bed
  G1 X{x_start} F{speed}
  G1 Y{y_start} F{speed}
  # Get ready to prime
  G1 Z0.3 F{z_speed}
  # Reset extrusion distance
  G92 E0
  # Prime nozzle 
  G1 Y{y_start + (70 * y_factor)} E16 F1200
  # Wipe
  G1 Y{y_start + (90 * y_factor)} F{speed}
  RESTORE_GCODE_STATE NAME=prime_line_state

[gcode_macro PRIME_BLOB]
description: Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.
gcode:
  SAVE_GCODE_STATE NAME=prime_blob_state
  M117 Priming nozzle with prime blob..
  RESPOND MSG="Priming nozzle with prime blob.."
  {% set speed = printer["gcode_macro GLOBAL_VARS"].macro_travel_speed|float * 60 %}
  {% set z_speed = printer["gcode_macro GLOBAL_VARS"].macro_z_speed|float * 60 %}
  {% if printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_x|lower == 'min' %}
    {% set x_start = 5 %}
  {% elif printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_x|lower == 'max' %}
    {% set x_start = printer.toolhead.axis_maximum.x - 5 %}
  {% else %}
    {% set x_start = printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_x|float %}
  {% endif %}
  {% if printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_y|lower == 'min' %}
    {% set y_start = 5 %}
    {% set y_factor = 1 %}
  {% elif printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_y|lower == 'max' %}
    {% set y_start = printer.toolhead.axis_maximum.y - 5 %}
    {% set y_factor = -1 %}
  {% else %}
    {% set y_start = printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_y|float %}
    {% if printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_y|float < printer.toolhead.axis_maximum.y / 2 %}
      {% set y_factor = 1 %}
    {% else %}
      {% set y_factor = -1 %}
    {% endif %}
  {% endif %}
  {% if printer["gcode_macro GLOBAL_VARS"].nozzle_prime_direction|lower == 'forwards' %}
    {% set y_factor = 1 %}
  {% elif printer["gcode_macro GLOBAL_VARS"].nozzle_prime_direction|lower == 'backwards' %}
    {% set y_factor = -1 %}
  {% endif %}
  {% set z = printer["gcode_macro GLOBAL_VARS"].start_print_park_z_height|float %}
  # Absolute positioning
  G90 
  # Relative extrusion
  M83
  # Lift to start print Z height
  G0 Z{z} F{z_speed}
  # move close to blob position along the edge of the bed
  G1 X{x_start} F{speed}
  G1 Y{y_start + (15 * y_factor)} F{speed}
  # Lower to blob extrusion height
  G1 Z0.5 F{z_speed}
  # Move to final position horizontally
  G1 Y{y_start} F{speed}
  # Extrude a blob
  G1 F60 E20
  # 40% fan
  M106 S102 
  # Move the extruder up by 5mm while extruding, breaks away from blob
  G1 Z5 F100 E5  
  # Move to wipe position, but keep extruding so the wipe is attached to blob
  G1 F200 Y{y_start + (25 * y_factor)} E1 
  # Go down diagonally while extruding
  # Broken down in z moves under 2mm as a workaround for a tuning tower test.
  # The tuning tower command thinks a new print has been started when z moves over 2mm and aborts.
  G1 F200 Y{y_start + (30 * y_factor)} Z3.8 E0.5
  G1 F200 Y{y_start + (35 * y_factor)} Z2.6 E0.5
  G1 F200 Y{y_start + (40 * y_factor)} Z1.4 E0.5
  G1 F200 Y{y_start + (45 * y_factor)} Z0.2 E0.5
  # 0% fan
  M106 S0
  # small wipe line
  G1 F200 Y{y_start + (50 * y_factor)} Z0.2 E0.6 
  # Break away wipe
  G1 F{speed} Y{y_start + (100 * y_factor)}
  RESTORE_GCODE_STATE NAME=prime_blob_state

[gcode_macro _START_PRINT_HEAT_CHAMBER]
description: Uses the extruder sensor to wait for chamber temp. Override the _START_PRINT_HEAT_CHAMBER macro to implement heated chamber handling.
gcode:
  {% if params.CHAMBER_TEMP is defined and params.BED_TEMP is defined and params.CHAMBER_TEMP|int > 0 %}
    {% set z = printer["gcode_macro GLOBAL_VARS"].start_print_park_z_height|float %}
    {% set zSpeed = printer["gcode_macro GLOBAL_VARS"].macro_z_speed|float * 60 %}
    G0 Z{z} F{zSpeed}
    M84
    M117 Heating chamber...
    RESPOND MSG="Heating chamber..."
    M140 S{params.BED_TEMP}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.CHAMBER_TEMP}
    MAYBE_HOME
  {% endif %}
